#include <stdio.h>
#include <stdbool.h>
#include <stdint.h>
#include "core.h"
#include "debug.h"
#include "error.h"
#include "globals.h"

//Initialization
//==============
py_error_t py_init(uint8_t *mem, uint16_t size, void (*error_func)(uint8_t, uint16_t))
{
    py_settings.mem=mem;
    py_settings.initialized=true;

    py_mem_size=size;
    py_error_func_ptr=error_func;
    py_sp=size;
    py_sp_count=0;
    *(uint16_t*)py_heap_begin=0;  //Linked list
    py_heap_ptr=PY_MEM_HEAP_BEGIN;

    return py_error_set(PY_ERROR_NONE,0);
}


//Stack
//=====
//Could combine with general purpose multi-byte push in execute.c but speed boost should be worth increased size
py_error_t py_push(struct StackItem item)
{
    if (sizeof(struct StackItem)>py_free) return py_error_set(PY_ERROR_OUT_OF_MEM,0);

    py_sp-=sizeof(struct StackItem);
    *(struct StackItem*)py_tos=item;
    py_sp_count++;

    return PY_ERROR_NONE;
}


//Memory management
//=================
uint8_t *py_allocate(uint16_t size)
{
    size+=sizeof(uint16_t);     //Two extra bytes for offset to next item
    if (size>py_free)
    {
        py_error_set(PY_ERROR_OUT_OF_MEM,0);
        return 0;
    }
    *(uint16_t*)(py_heap_current)=size;
    uint8_t *ret_val=py_heap_current;
    py_heap_ptr+=size;
    *(uint16_t*)(py_heap_current)=0;
    return ret_val;
}

//Execution
//=========
//bytecode - pointer to beginning of object which starts with:
//- uint16_t: distance to next object
//- uint8_t: enum ObjectTypes - should be OBJECT_TEMP
py_error_t py_run(uint8_t *bytecode)
{
    for (int i=0;i<10;i++)
    {
        debug("%d\n",*(bytecode+i));
    }


    //Distance to next object
    uint16_t size=*(uint16_t *)bytecode-sizeof(uint16_t);
    bytecode+=sizeof(uint16_t);

    //Debugging
    {
        debug("RUN: size:%u\n",size);
        debug("%s\n",debug_value("object type",*bytecode));
    }
    //Debugging
    
    //Object type - should be OBJECT_TEMP
    bytecode+=sizeof(uint8_t);
    uint8_t op;
    do 
    {
        uint8_t op=*bytecode;
        bytecode++;

        //Debugging
        debug("%d - %s ",op,debug_value("token",op));
        //Debugging

        /*
        switch (op)
        {
            TOKEN_EQ:
                break;
            TOKEN_EXP_EQ:
                break;
            TOKEN_MUL_EQ:
                break;
            TOKEN_DIV_EQ:
                break;
            TOKEN_MOD_EQ:
                break;
            TOKEN_ADD_EQ:
                break;
            TOKEN_SUB_EQ:
                break;
            TOKEN_LSHIFT_EQ:
                break;
            TOKEN_RSHIFT_EQ:
                break;
            TOKEN_AND_EQ:
                break;
            TOKEN_XOR_EQ:
                break;
            TOKEN_OR_EQ:
                break;
            TOKEN_EXP:
                break;
            TOKEN_INVERT:
                break;
            TOKEN_NEG:
                break;
            TOKEN_PLUS:
                break;
            TOKEN_MUL:
                break;
            TOKEN_DIV:
                break;
            TOKEN_MOD:
                break;
            TOKEN_ADD:
                break;
            TOKEN_SUB:
                break;
            TOKEN_LSHIFT:
                break;
            TOKEN_RSHIFT:
                break;
            TOKEN_AND:
                break;
            TOKEN_XOR:
                break;
            TOKEN_OR:
                break;
            TOKEN_IN:
                break;
            TOKEN_NOT_IN:
                break;
            TOKEN_LT:
                break;
            TOKEN_LE:
                break;
            TOKEN_GT:
                break;
            TOKEN_GE:
                break;
            TOKEN_NE:
                break;
            TOKEN_EQ_EQ:
                break;
            TOKEN_EXCLAM:
                break;
            TOKEN_BOOL_NOT:
                break;
            TOKEN_BOOL_AND:
                break;
            TOKEN_BOOL_OR:
                break;
            //Tokens below here are bytecode - saves space to reuse token range
            TOKEN_INT8:
                break;
            TOKEN_INT16:
                break;
            TOKEN_INT32:
                break;
            TOKEN_STRING:
                break;
            TOKEN_MAKE_LIST:
                break;
            TOKEN_RETURN:
                break;
        } //switch(op)
        */

        //Debugging
        debug(" (%d = %d? %d)\n",op,TOKEN_RETURN,op==TOKEN_RETURN);
        debug_key();
        //Debugging

    } while (op!=TOKEN_RETURN);

    debug("Returning...");

    return PY_ERROR_NONE;
}
